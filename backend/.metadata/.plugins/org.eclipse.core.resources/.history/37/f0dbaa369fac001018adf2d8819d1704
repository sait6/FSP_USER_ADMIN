package com.saiteja.user_service.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.saiteja.user_service.dto.UserRequestDTO;
import com.saiteja.user_service.dto.UserResponseDTO;
import com.saiteja.user_service.service.UserService;

import io.swagger.v3.oas.annotations.Operation;
import org.springframework.web.bind.annotation.RequestBody;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;

@CrossOrigin(originPatterns = "http://localhost:4200", allowCredentials = "true")
@RestController
@RequestMapping("/api/users")
@Tag(name = "User Controller", description = "User management APIs")
public class UserController {
	private final UserService userService;
	private static final Logger logger = LoggerFactory.getLogger(UserController.class);

	public UserController(UserService userService) {
		this.userService = userService;
	}

	@Operation(summary = "Create a new user", description = "Registers a new user with provided details")
    @ApiResponse(responseCode = "200", description = "User created successfully")
	@PostMapping
	public ResponseEntity<UserResponseDTO> createUser(@Valid @RequestBody UserRequestDTO requestDto) {
		logger.info("User payload â†’ firstname: {}, lastname: {}, password: {}, email: {}, role: {}, balance: {}",
				requestDto.getFirstname(),
				requestDto.getLastname(),
				requestDto.getPassword(),
				requestDto.getEmail(),
				requestDto.getRole(),
				requestDto.getBalance());
		return ResponseEntity.ok(userService.saveUser(requestDto));
	}

	@Operation(summary = "Get all users", description = "Retrieves a list of all registered users")
    @ApiResponse(responseCode = "200", description = "List of users retrieved successfully")
    @GetMapping
	public ResponseEntity<List<UserResponseDTO>> getAllUsers() {
		return ResponseEntity.ok(userService.getAllUsers());
	}

	@Operation(summary = "Get user by ID", description = "Fetches a user by their unique ID")
    @ApiResponse(responseCode = "200", description = "User found")
    @ApiResponse(responseCode = "404", description = "User not found")
    @GetMapping("/{id}")
	public ResponseEntity<UserResponseDTO> getUserById(@PathVariable String id) {
		UserResponseDTO user = userService.getUserById(id);
		return user != null ? ResponseEntity.ok(user) : ResponseEntity.notFound().build();
	}

	@Operation(summary = "Delete user by ID", description = "Deletes a user by their unique ID")
    @ApiResponse(responseCode = "204", description = "User deleted successfully")
    @ApiResponse(responseCode = "404", description = "User not found")
    @DeleteMapping("/{id}")
	public ResponseEntity<Void> deleteUser(@PathVariable String id) {
		userService.deleteUser(id);
		return ResponseEntity.noContent().build();
	}
}
