package com.saiteja.user_service.controller;

import org.springframework.http.ResponseEntity;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.saiteja.user_service.dto.LoginRequestDTO;
import com.saiteja.user_service.dto.LoginResponseDTO;
import com.saiteja.user_service.dto.UserResponseDTO;
import com.saiteja.user_service.service.CustomUserDetailsService;
import com.saiteja.user_service.service.UserService;
import com.saiteja.user_service.utility.JwtUtil;

import io.swagger.v3.oas.annotations.parameters.RequestBody;
import io.swagger.v3.oas.annotations.tags.Tag;

@CrossOrigin(originPatterns = "http://localhost:4200", allowCredentials = "true")
@RestController
@RequestMapping("/api/auth")
@Tag(name = "Authentication Controller", description = "User management APIs")
public class AuthController {
	private final UserService userService;
    private final CustomUserDetailsService userDetailsService;
    private final JwtUtil jwtUtil;

    public AuthController(UserService userService,
                          CustomUserDetailsService userDetailsService,
                          JwtUtil jwtUtil) {
        this.userService = userService;
        this.userDetailsService = userDetailsService;
        this.jwtUtil = jwtUtil;
    }

    @PostMapping("/login")
    public ResponseEntity<LoginResponseDTO> login(@RequestBody LoginRequestDTO request) {
        // Validate credentials
        UserResponseDTO user = userService.login(request.getEmail(), request.getPassword());

        // Load UserDetails for JWT
        UserDetails userDetails = userDetailsService.loadUserByUsername(user.getEmail());

        // Generate token
        String token = jwtUtil.generateToken(userDetails);

        return ResponseEntity.ok(new LoginResponseDTO(token));
    }

}
